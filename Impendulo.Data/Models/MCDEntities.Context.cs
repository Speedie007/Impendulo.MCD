//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Impendulo.Data.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MCDEntities : DbContext
    {
        public MCDEntities()
            : base("name=MCDEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Activity> Activities { get; set; }
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<Assessor> Assessors { get; set; }
        public virtual DbSet<ContactDetail> ContactDetails { get; set; }
        public virtual DbSet<CostingModel> CostingModels { get; set; }
        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<CourseSchedule> CourseSchedules { get; set; }
        public virtual DbSet<CurricullumCourseCode> CurricullumCourseCodes { get; set; }
        public virtual DbSet<CurriculumCourseEnrollment> CurriculumCourseEnrollments { get; set; }
        public virtual DbSet<CurriculumCourseMinimumMaximum> CurriculumCourseMinimumMaximums { get; set; }
        public virtual DbSet<CurriculumCourseModule> CurriculumCourseModules { get; set; }
        public virtual DbSet<CurriculumCoursePredecessor> CurriculumCoursePredecessors { get; set; }
        public virtual DbSet<CurriculumCourse> CurriculumCourses { get; set; }
        public virtual DbSet<Curriculum> Curriculums { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Enrollment> Enrollments { get; set; }
        public virtual DbSet<EquiryHistory> EquiryHistories { get; set; }
        public virtual DbSet<FacilitatorAssociatedCourse> FacilitatorAssociatedCourses { get; set; }
        public virtual DbSet<FacilitatorQualification> FacilitatorQualifications { get; set; }
        public virtual DbSet<Facilitator> Facilitators { get; set; }
        public virtual DbSet<FacilitatorSetaAccreditation> FacilitatorSetaAccreditations { get; set; }
        public virtual DbSet<Individual> Individuals { get; set; }
        public virtual DbSet<LookupAddressType> LookupAddressTypes { get; set; }
        public virtual DbSet<LookupContactType> LookupContactTypes { get; set; }
        public virtual DbSet<LookupCountry> LookupCountries { get; set; }
        public virtual DbSet<LookupDepartment> LookupDepartments { get; set; }
        public virtual DbSet<LookupDisability> LookupDisabilities { get; set; }
        public virtual DbSet<LookupEnrollmentProgressState> LookupEnrollmentProgressStates { get; set; }
        public virtual DbSet<LookupEnrollmentType> LookupEnrollmentTypes { get; set; }
        public virtual DbSet<LookupEthnicity> LookupEthnicities { get; set; }
        public virtual DbSet<LookupGender> LookupGenders { get; set; }
        public virtual DbSet<LookupMartialStatus> LookupMartialStatuses { get; set; }
        public virtual DbSet<LookupProvince> LookupProvinces { get; set; }
        public virtual DbSet<LookupQualificationLevel> LookupQualificationLevels { get; set; }
        public virtual DbSet<LookupSectionalEnrollmentType> LookupSectionalEnrollmentTypes { get; set; }
        public virtual DbSet<LookupSeta> LookupSetas { get; set; }
        public virtual DbSet<LookupTitle> LookupTitles { get; set; }
        public virtual DbSet<LookupTypeOfRelation> LookupTypeOfRelations { get; set; }
        public virtual DbSet<Module> Modules { get; set; }
        public virtual DbSet<NextOfKin> NextOfKins { get; set; }
        public virtual DbSet<Qualification> Qualifications { get; set; }
        public virtual DbSet<Schedule> Schedules { get; set; }
        public virtual DbSet<SMTPSetting> SMTPSettings { get; set; }
        public virtual DbSet<StudentAssociatedCompany> StudentAssociatedCompanies { get; set; }
        public virtual DbSet<StudentDisability> StudentDisabilities { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<VenueAssociatedCurriculumCourse> VenueAssociatedCurriculumCourses { get; set; }
        public virtual DbSet<Venue> Venues { get; set; }
        public virtual DbSet<Login> Logins { get; set; }
        public virtual DbSet<SystemAdministrator> SystemAdministrators { get; set; }
        public virtual DbSet<EmailMessageRepository> EmailMessageRepositories { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<LookupEnquiryStatus> LookupEnquiryStatuses { get; set; }
        public virtual DbSet<LookupEquiryHistoryType> LookupEquiryHistoryTypes { get; set; }
        public virtual DbSet<LookupProcess> LookupProcesses { get; set; }
        public virtual DbSet<LookupProcessStep> LookupProcessSteps { get; set; }
        public virtual DbSet<MessageTemplate> MessageTemplates { get; set; }
        public virtual DbSet<CurriculumEquirySelectedCours> CurriculumEquirySelectedCourses { get; set; }
        public virtual DbSet<EmailMessageRepositoryHistory> EmailMessageRepositoryHistories { get; set; }
        public virtual DbSet<EmailSystemOutGoingMessageAttachment> EmailSystemOutGoingMessageAttachments { get; set; }
        public virtual DbSet<EmailSystemOutGoingMessage> EmailSystemOutGoingMessages { get; set; }
        public virtual DbSet<LookupEmailMessageRepositoryHistoryTrancationType> LookupEmailMessageRepositoryHistoryTrancationTypes { get; set; }
        public virtual DbSet<CurriculumPrequisiteCourse> CurriculumPrequisiteCourses { get; set; }
        public virtual DbSet<CurriculumEnquiry> CurriculumEnquiries { get; set; }
        public virtual DbSet<Enquiry> Enquiries { get; set; }
        public virtual DbSet<ApprienticeshipEnrollment> ApprienticeshipEnrollments { get; set; }
        public virtual DbSet<ApprenticeshipEnrollmentDocument> ApprenticeshipEnrollmentDocuments { get; set; }
        public virtual DbSet<LookupEnrollentDocumentType> LookupEnrollentDocumentTypes { get; set; }
        public virtual DbSet<File> Files { get; set; }
    
        public virtual ObjectResult<CurriculumCourse> GetCurriculumCourseInOrder(Nullable<int> curriculumID)
        {
            var curriculumIDParameter = curriculumID.HasValue ?
                new ObjectParameter("CurriculumID", curriculumID) :
                new ObjectParameter("CurriculumID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CurriculumCourse>("GetCurriculumCourseInOrder", curriculumIDParameter);
        }
    
        public virtual ObjectResult<CurriculumCourse> GetCurriculumCourseInOrder(Nullable<int> curriculumID, MergeOption mergeOption)
        {
            var curriculumIDParameter = curriculumID.HasValue ?
                new ObjectParameter("CurriculumID", curriculumID) :
                new ObjectParameter("CurriculumID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CurriculumCourse>("GetCurriculumCourseInOrder", mergeOption, curriculumIDParameter);
        }
    
        public virtual ObjectResult<string> GetLookupTablesForEnumAutoGenteration()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetLookupTablesForEnumAutoGenteration");
        }
    
        public virtual ObjectResult<Report_StudentInfo_Result> Report_StudentInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_StudentInfo_Result>("Report_StudentInfo");
        }
    
        public virtual ObjectResult<Reports_StudentReports_Result> Reports_StudentReports()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Reports_StudentReports_Result>("Reports_StudentReports");
        }
    }
}
